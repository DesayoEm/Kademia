"""Merge Users table into ProfileBase, included remarks column in Grades

Revision ID: 85043605e3a7
Revises: 96b4924cd152
Create Date: 2025-01-23 16:29:10.886296

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from V2.app.database.models.common_imports import Base
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '85043605e3a7'
down_revision: Union[str, None] = '96b4924cd152'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###


    op.add_column('grades', sa.Column('remarks', sa.String(length=300), nullable=True))
    op.add_column('parents', sa.Column('user_id', sa.UUID(), nullable=False))
    op.add_column('parents', sa.Column('user_type', sa.Enum('Student', 'Parent', 'Staff', 'System', name='usertype'), nullable=False))
    op.add_column('parents', sa.Column('password_hash', sa.String(length=300), nullable=False))
    op.add_column('parents', sa.Column('access_level', sa.Enum('Inactive', 'User', 'Admin', 'Superuser', 'System', name='accesslevel'), nullable=False))
    op.add_column('parents', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.add_column('parents', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('parents', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
    op.drop_index('idx_parents_profile_id', table_name='parents')
    op.drop_constraint('parents_profile_id_key', 'parents', type_='unique')
    op.drop_constraint('parents_profile_id_fkey', 'parents', type_='foreignkey')
    op.drop_column('parents', 'last_active_date')
    op.drop_column('parents', 'profile_id')
    op.add_column('staff', sa.Column('user_id', sa.UUID(), nullable=False))
    op.add_column('staff', sa.Column('user_type', sa.Enum('Student', 'Parent', 'Staff', 'System', name='usertype'), nullable=False))
    op.add_column('staff', sa.Column('password_hash', sa.String(length=300), nullable=False))
    op.add_column('staff', sa.Column('access_level', sa.Enum('Inactive', 'User', 'Admin', 'Superuser', 'System', name='accesslevel'), nullable=False))
    op.add_column('staff', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.add_column('staff', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
    op.drop_index('idx_staff_profile_id', table_name='staff')
    op.drop_constraint('staff_profile_id_key', 'staff', type_='unique')
    op.drop_constraint('staff_profile_id_fkey', 'staff', type_='foreignkey')
    op.drop_column('staff', 'last_active_date')
    op.drop_column('staff', 'profile_id')
    op.add_column('students', sa.Column('user_id', sa.UUID(), nullable=False))
    op.add_column('students', sa.Column('user_type', sa.Enum('Student', 'Parent', 'Staff', 'System', name='usertype'), nullable=False))
    op.add_column('students', sa.Column('password_hash', sa.String(length=300), nullable=False))
    op.add_column('students', sa.Column('access_level', sa.Enum('Inactive', 'User', 'Admin', 'Superuser', 'System', name='accesslevel'), nullable=False))
    op.add_column('students', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.add_column('students', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('students', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('students', 'image_url',
               existing_type=sa.VARCHAR(length=200),
               nullable=True)
    op.drop_index('idx_students_profile_id', table_name='students')
    op.drop_constraint('students_profile_id_key', 'students', type_='unique')
    op.drop_constraint('students_profile_id_fkey', 'students', type_='foreignkey')
    op.drop_column('students', 'last_active_date')
    op.drop_column('students', 'profile_id')



    op.drop_constraint('access_level_changes_profile_id_fkey', 'access_level_changes', type_='foreignkey')
    op.alter_column('access_level_changes', 'profile_id',
                    new_column_name='user_id',
                    existing_type=sa.UUID())
    op.create_foreign_key(None, 'access_level_changes', 'staff', ['user_id'], ['id'])

    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_constraint(None, 'access_level_changes', type_='foreignkey')
    op.alter_column('access_level_changes', 'user_id',
                    new_column_name='profile_id',
                    existing_type=sa.UUID())

    op.create_table('users',
    sa.Column('profile_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_type', sa.Enum('Student', 'Parent', 'Staff', 'System', name='usertype'), nullable=False),
    sa.Column('password_hash', sa.String(300), nullable=False),
    sa.Column('access_level', sa.Enum('Inactive', 'User', 'Admin', 'Superuser', 'System', name='accesslevel'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, server_default='false'),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('profile_id')
                    )

    op.create_foreign_key('access_level_changes_profile_id_fkey',
                          'access_level_changes', 'users',
                          ['profile_id'], ['profile_id'])

    op.add_column('students', sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('students', sa.Column('last_active_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('students_profile_id_fkey', 'students', 'users', ['profile_id'], ['profile_id'], ondelete='RESTRICT')
    op.create_unique_constraint('students_profile_id_key', 'students', ['profile_id'])
    op.create_index('idx_students_profile_id', 'students', ['profile_id'], unique=False)
    op.alter_column('students', 'image_url',
               existing_type=sa.VARCHAR(length=200),
               nullable=False)
    op.drop_column('students', 'last_login')
    op.drop_column('students', 'is_active')
    op.drop_column('students', 'is_verified')
    op.drop_column('students', 'access_level')
    op.drop_column('students', 'password_hash')
    op.drop_column('students', 'user_type')
    op.drop_column('students', 'user_id')
    op.add_column('staff', sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('staff', sa.Column('last_active_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('staff_profile_id_fkey', 'staff', 'users', ['profile_id'], ['profile_id'], ondelete='RESTRICT')
    op.create_unique_constraint('staff_profile_id_key', 'staff', ['profile_id'])
    op.create_index('idx_staff_profile_id', 'staff', ['profile_id'], unique=False)
    op.drop_column('staff', 'last_login')
    op.drop_column('staff', 'is_verified')
    op.drop_column('staff', 'access_level')
    op.drop_column('staff', 'password_hash')
    op.drop_column('staff', 'user_type')
    op.drop_column('staff', 'user_id')
    op.add_column('parents', sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('parents', sa.Column('last_active_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('parents_profile_id_fkey', 'parents', 'users', ['profile_id'], ['profile_id'], ondelete='RESTRICT')
    op.create_unique_constraint('parents_profile_id_key', 'parents', ['profile_id'])
    op.create_index('idx_parents_profile_id', 'parents', ['profile_id'], unique=False)
    op.drop_column('parents', 'last_login')
    op.drop_column('parents', 'is_active')
    op.drop_column('parents', 'is_verified')
    op.drop_column('parents', 'access_level')
    op.drop_column('parents', 'password_hash')
    op.drop_column('parents', 'user_type')
    op.drop_column('parents', 'user_id')
    op.drop_column('grades', 'remarks')
    # ### end Alembic commands ###
