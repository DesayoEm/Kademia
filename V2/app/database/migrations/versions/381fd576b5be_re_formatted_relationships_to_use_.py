"""re-formatted relationships to use declarative mapping
Structured relationship cardinality
Added a unique constraint including student_id, subject_id, academic_year, and term to StudentSubjects
removed title column from StudentSubjects
added fk educator_id to Subjects
changed academic year to str
removed redundant educatorSubjects table
added reps and assistant to classes
removed unique constraint from description column in staff roles

Revision ID: 381fd576b5be
Revises: 939314069596
Create Date: 2025-01-30 03:51:47.913724

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from V2.app.database.models.common_imports import Base
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '381fd576b5be'
down_revision: Union[str, None] = '939314069596'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('educator_subjects')
    op.add_column('classes', sa.Column('student_rep', sa.UUID(), nullable=True))
    op.add_column('classes', sa.Column('assistant_rep', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'classes', 'students', ['assistant_rep'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'classes', 'students', ['student_rep'], ['id'], ondelete='SET NULL')
    op.alter_column('grades', 'academic_year',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=9),
               existing_nullable=False)
    op.drop_constraint('staff_roles_description_key', 'staff_roles', type_='unique')
    op.alter_column('student_subjects', 'academic_year',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=9),
               existing_nullable=False)
    op.create_unique_constraint(None, 'student_subjects', ['student_id', 'subject_id', 'academic_year', 'term'])
    op.drop_column('student_subjects', 'title')
    op.add_column('subjects', sa.Column('educator_id', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'subjects', 'educator', ['educator_id'], ['id'], ondelete='SET NULL')
    op.alter_column('total_grades', 'academic_year',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=9),
               existing_nullable=False)
    op.drop_index('idx_total_grade_subject_id', table_name='total_grades')
    op.create_index('idx_total_grade_subject_id', 'total_grades', ['subject_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_total_grade_subject_id', table_name='total_grades')
    op.create_index('idx_total_grade_subject_id', 'total_grades', ['id'], unique=False)
    op.alter_column('total_grades', 'academic_year',
               existing_type=sa.String(length=9),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_constraint(None, 'subjects', type_='foreignkey')
    op.drop_column('subjects', 'educator_id')
    op.add_column('student_subjects', sa.Column('title', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'student_subjects', type_='unique')
    op.alter_column('student_subjects', 'academic_year',
               existing_type=sa.String(length=9),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.create_unique_constraint('staff_roles_description_key', 'staff_roles', ['description'])
    op.alter_column('grades', 'academic_year',
               existing_type=sa.String(length=9),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_constraint(None, 'classes', type_='foreignkey')
    op.drop_constraint(None, 'classes', type_='foreignkey')
    op.drop_column('classes', 'assistant_rep')
    op.drop_column('classes', 'student_rep')
    op.create_table('educator_subjects',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('educator_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('subject_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('term', postgresql.ENUM('FIRST', 'SECOND', 'THIRD', name='term'), autoincrement=False, nullable=False),
    sa.Column('academic_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('last_modified_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_modified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_soft_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('soft_deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deletion_reason', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('soft_deleted_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['staff.id'], name='educator_subjects_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['educator_id'], ['educator.id'], name='educator_subjects_educator_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_modified_by'], ['staff.id'], name='educator_subjects_last_modified_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['soft_deleted_by'], ['staff.id'], name='educator_subjects_soft_deleted_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='educator_subjects_subject_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='educator_subjects_pkey')
    )
    # ### end Alembic commands ###
